/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mackenzie.pos.songpop.view;

import br.com.mackenzie.pos.songpop.controle.Facade;
import br.com.mackenzie.pos.songpop.controle.domain.enumeracao.TipoPergunta;
import br.com.mackenzie.pos.songpop.controle.util.Util;
import br.com.mackenzie.pos.songpop.domain.Artista;
import br.com.mackenzie.pos.songpop.domain.Categoria;
import br.com.mackenzie.pos.songpop.domain.Desafio;
import br.com.mackenzie.pos.songpop.domain.ItemDesafio;
import br.com.mackenzie.pos.songpop.domain.Jogador;
import br.com.mackenzie.pos.songpop.domain.Musica;
import br.com.mackenzie.pos.songpop.domain.Resposta;
import br.com.mackenzie.pos.songpop.domain.RespostaJogadorItemDesafio;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author Isaac
 */
public class TelaDesafio extends javax.swing.JFrame {

    /**
     * Creates new form TelaDesafio
     */
    public TelaDesafio() {
        initComponents();

        Facade facade = Facade.getInstance();

        int idCategoria = Util.gerarNumerosAleatorios(4);

        Categoria categoria = facade.obterCategoriaPorId(Long.valueOf(idCategoria));
        Jogador desafiante = facade.obterJogadorPorId(Long.parseLong("1"));
        Jogador desafiado = facade.obterJogadorPorId(Long.parseLong("2"));

        Desafio desafio = facade.criarDesafio(desafiante, desafiado, categoria);
        this.setDesafio(desafio);

        this.labelCategoria.setText(this.getDesafio().getCategoria().getNome());
        this.labelDesafiante.setText(this.getDesafio().getDesafiante().getNome());
        this.labelDesafiado.setText(this.getDesafio().getDesafiado().getNome());

        iniciarNovaQuestao(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jpMusicaGUI = new javax.swing.JPanel();
        jpBarraDeProgressoGUI = new javax.swing.JProgressBar();
        jpTrechoMusicaGUI = new javax.swing.JLabel();
        jpAdversariosGUI = new javax.swing.JPanel();
        painelDesafianteGUI = new javax.swing.JPanel();
        labelDesafiante = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        painelDesafiadoGUI = new javax.swing.JPanel();
        labelDesafiado = new javax.swing.JLabel();
        jpItemDesafioGUI = new javax.swing.JPanel();
        item1GUI = new javax.swing.JLabel();
        item2GUI = new javax.swing.JLabel();
        item3GUI = new javax.swing.JLabel();
        item4GUI = new javax.swing.JLabel();
        item5GUI = new javax.swing.JLabel();
        jpOpcoesRespostasGUI = new javax.swing.JPanel();
        jBResposta1 = new javax.swing.JButton();
        jBResposta2 = new javax.swing.JButton();
        jBResposta3 = new javax.swing.JButton();
        jBResposta4 = new javax.swing.JButton();
        jpRodapeGUI = new javax.swing.JPanel();
        jpCategoriaGUI = new javax.swing.JPanel();
        labelCategoria = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SongPop::Desafio");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(240, 240, 240));
        setResizable(false);
        getContentPane().setLayout(null);

        jpMusicaGUI.setBackground(new java.awt.Color(0, 153, 255));
        jpMusicaGUI.setLayout(null);
        jpMusicaGUI.add(jpBarraDeProgressoGUI);
        jpBarraDeProgressoGUI.setBounds(270, 70, 146, 14);

        jpTrechoMusicaGUI.setBackground(new java.awt.Color(204, 255, 204));
        jpTrechoMusicaGUI.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jpTrechoMusicaGUI.setText("Sei l√°");
        jpTrechoMusicaGUI.setOpaque(true);
        jpMusicaGUI.add(jpTrechoMusicaGUI);
        jpTrechoMusicaGUI.setBounds(110, 10, 490, 40);

        getContentPane().add(jpMusicaGUI);
        jpMusicaGUI.setBounds(0, 180, 670, 100);

        jpAdversariosGUI.setBackground(new java.awt.Color(255, 255, 255));
        jpAdversariosGUI.setAlignmentX(0.0F);
        jpAdversariosGUI.setAlignmentY(0.0F);

        painelDesafianteGUI.setBackground(new java.awt.Color(204, 204, 255));

        labelDesafiante.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        labelDesafiante.setText("Jogador 1");
        labelDesafiante.setMinimumSize(new java.awt.Dimension(5, 22));
        painelDesafianteGUI.add(labelDesafiante);
        labelDesafiante.getAccessibleContext().setAccessibleParent(painelDesafianteGUI);

        jpAdversariosGUI.add(painelDesafianteGUI);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disco.png"))); // NOI18N
        jLabel1.setAlignmentY(0.0F);
        jpAdversariosGUI.add(jLabel1);

        painelDesafiadoGUI.setBackground(new java.awt.Color(204, 204, 255));

        labelDesafiado.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        labelDesafiado.setText("CPU");
        labelDesafiado.setMaximumSize(new java.awt.Dimension(5, 22));
        painelDesafiadoGUI.add(labelDesafiado);

        jpAdversariosGUI.add(painelDesafiadoGUI);

        getContentPane().add(jpAdversariosGUI);
        jpAdversariosGUI.setBounds(0, 0, 670, 150);
        jpAdversariosGUI.getAccessibleContext().setAccessibleParent(jpAdversariosGUI);

        jpItemDesafioGUI.setBackground(new java.awt.Color(0, 153, 255));

        item1GUI.setBackground(new java.awt.Color(204, 204, 204));
        item1GUI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        item1GUI.setText("                              ");
        item1GUI.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(153, 153, 153)));
        item1GUI.setOpaque(true);
        jpItemDesafioGUI.add(item1GUI);

        item2GUI.setBackground(new java.awt.Color(204, 204, 204));
        item2GUI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        item2GUI.setText("                              ");
        item2GUI.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(153, 153, 153)));
        item2GUI.setOpaque(true);
        jpItemDesafioGUI.add(item2GUI);

        item3GUI.setBackground(new java.awt.Color(204, 204, 204));
        item3GUI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        item3GUI.setText("                              ");
        item3GUI.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(153, 153, 153)));
        item3GUI.setOpaque(true);
        jpItemDesafioGUI.add(item3GUI);

        item4GUI.setBackground(new java.awt.Color(204, 204, 204));
        item4GUI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        item4GUI.setText("                              ");
        item4GUI.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(153, 153, 153)));
        item4GUI.setOpaque(true);
        jpItemDesafioGUI.add(item4GUI);

        item5GUI.setBackground(new java.awt.Color(204, 204, 204));
        item5GUI.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        item5GUI.setText("                              ");
        item5GUI.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 153, 255), new java.awt.Color(153, 153, 153)));
        item5GUI.setOpaque(true);
        jpItemDesafioGUI.add(item5GUI);

        getContentPane().add(jpItemDesafioGUI);
        jpItemDesafioGUI.setBounds(0, 280, 670, 50);

        jpOpcoesRespostasGUI.setBackground(new java.awt.Color(0, 153, 255));
        jpOpcoesRespostasGUI.setLayout(new java.awt.GridLayout(2, 2, 2, 2));

        jBResposta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBResposta1ActionPerformed(evt);
            }
        });
        jpOpcoesRespostasGUI.add(jBResposta1);

        jBResposta2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBResposta2ActionPerformed(evt);
            }
        });
        jpOpcoesRespostasGUI.add(jBResposta2);

        jBResposta3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBResposta3ActionPerformed(evt);
            }
        });
        jpOpcoesRespostasGUI.add(jBResposta3);

        jBResposta4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBResposta4ActionPerformed(evt);
            }
        });
        jpOpcoesRespostasGUI.add(jBResposta4);

        getContentPane().add(jpOpcoesRespostasGUI);
        jpOpcoesRespostasGUI.setBounds(0, 330, 670, 70);

        jpRodapeGUI.setBackground(new java.awt.Color(0, 153, 255));
        getContentPane().add(jpRodapeGUI);
        jpRodapeGUI.setBounds(0, 400, 670, 40);

        jpCategoriaGUI.setBackground(new java.awt.Color(0, 153, 255));

        labelCategoria.setFont(new java.awt.Font("Corbel", 3, 24)); // NOI18N
        jpCategoriaGUI.add(labelCategoria);

        getContentPane().add(jpCategoriaGUI);
        jpCategoriaGUI.setBounds(0, 150, 670, 30);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-689)/2, (screenSize.height-469)/2, 689, 469);
    }// </editor-fold>//GEN-END:initComponents

    private void jBResposta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBResposta1ActionPerformed
        respostaJogador(1, 0, 0);
    }//GEN-LAST:event_jBResposta1ActionPerformed

    private void jBResposta2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBResposta2ActionPerformed
        respostaJogador(2, 0, 0);
    }//GEN-LAST:event_jBResposta2ActionPerformed

    private void jBResposta3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBResposta3ActionPerformed
        respostaJogador(3, 0, 0);
    }//GEN-LAST:event_jBResposta3ActionPerformed

    private void jBResposta4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBResposta4ActionPerformed
        respostaJogador(4, 0, 0);
    }//GEN-LAST:event_jBResposta4ActionPerformed

    private void respostaJogador(int opcao, long idJogador, long idItemDesafio) {
        Facade facade = Facade.getInstance();
        
        RespostaJogadorItemDesafio respostaDesafiante = new RespostaJogadorItemDesafio();
        
        Jogador desafiante = facade.obterJogadorPorId(Long.parseLong("1"));
//        Jogador desafiado = facade.obterJogadorPorId(Long.parseLong("2"));
        
        respostaDesafiante.setJogador(desafiante);
        respostaDesafiante.setTempoFinalResposta(new Date().getTime());
        
        Resposta resposta = new Resposta();

        int i = 1;
        for (Iterator<String> iOpcao = this.getItemDesafioAtual().getOpcoes().iterator(); iOpcao.hasNext();) {
            String op = iOpcao.next();

            if (i == opcao) {
                resposta.setDescricao(op);
                break;
            }
            i++;
        }
        
        resposta.setTipoPergunta(this.getItemDesafioAtual().getTipoPergunta());
        respostaDesafiante.setRespota(resposta);
        
        if (this.getItemDesafioAtual().getRespostaCorreta().getDescricao().trim().equalsIgnoreCase(resposta.getDescricao().trim())) {
            respostaDesafiante.setPontosGanhos(respostaDesafiante.getPontosGanhos() + 100);
            JOptionPane.showMessageDialog(null, "Parab√©ns!!! Resposta Correta :)");
        } else {
            respostaDesafiante.setPontosGanhos(respostaDesafiante.getPontosGanhos() + 60);
            JOptionPane.showMessageDialog(null, "Que pena, voc√™ errou :-/");
        }
        
        this.getItemDesafioAtual().setRespostaJogadorDesafianteItemDesafio(null);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel item1GUI;
    private javax.swing.JLabel item2GUI;
    private javax.swing.JLabel item3GUI;
    private javax.swing.JLabel item4GUI;
    private javax.swing.JLabel item5GUI;
    private javax.swing.JButton jBResposta1;
    private javax.swing.JButton jBResposta2;
    private javax.swing.JButton jBResposta3;
    private javax.swing.JButton jBResposta4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel jpAdversariosGUI;
    private javax.swing.JProgressBar jpBarraDeProgressoGUI;
    private javax.swing.JPanel jpCategoriaGUI;
    private javax.swing.JPanel jpItemDesafioGUI;
    private javax.swing.JPanel jpMusicaGUI;
    private javax.swing.JPanel jpOpcoesRespostasGUI;
    private javax.swing.JPanel jpRodapeGUI;
    private javax.swing.JLabel jpTrechoMusicaGUI;
    private javax.swing.JLabel labelCategoria;
    private javax.swing.JLabel labelDesafiado;
    private javax.swing.JLabel labelDesafiante;
    private javax.swing.JPanel painelDesafiadoGUI;
    private javax.swing.JPanel painelDesafianteGUI;
    // End of variables declaration//GEN-END:variables
    private Desafio desafio;
    private ItemDesafio itemDesafioAtual;

    public Desafio getDesafio() {
        return desafio;
    }

    public void setDesafio(Desafio desafio) {
        this.desafio = desafio;
    }
    
    public ItemDesafio getItemDesafioAtual() {
        return itemDesafioAtual;
    }

    public void setItemDesafioAtual(ItemDesafio itemDesafioAtual) {
        this.itemDesafioAtual = itemDesafioAtual;
    }

    private void iniciarNovaQuestao(int idItem) {

        ItemDesafio[] itensDesafios = this.getDesafio().getItemDesafio();

        ItemDesafio itemDesafio = itensDesafios[idItem];

        // Tipo de Pergunta
        item1GUI.setText(itemDesafio.getTipoPergunta().getDescricao());
        item1GUI.setBackground(Color.WHITE);

        jpTrechoMusicaGUI.setText(itemDesafio.getMusica().getPrimeraParte());
//        jpTrechoMusicaGUI.setText(itemDesafio.getMusica().getSegundaParte());


        Facade facade = Facade.getInstance();
        
        if (itemDesafio.getTipoPergunta() == TipoPergunta.ARTISTA) {
            ArrayList<Artista> artistas = (ArrayList<Artista>) facade.pesquisarTudosArtistas();

            Set<Artista> artistasSorteados = new HashSet<Artista>();
            artistasSorteados.add(itemDesafio.getMusica().getArtista());

            int QTD_ARTISTAS = 3;

            while (artistasSorteados.size() != (QTD_ARTISTAS + 1)) {
                LinkedList<Integer> idsArtistas = Util.gerarNumerosAleatoriosComIntervalo(QTD_ARTISTAS, artistas.size());

                for (Integer idSorteado : idsArtistas) {
                    if (idSorteado.intValue() < artistas.size()) {
                        artistasSorteados.add(artistas.get(idSorteado));
                    }

                }
            }

            for (Iterator<Artista> it = artistasSorteados.iterator(); it.hasNext();) {
                Artista artista = it.next();
                itemDesafio.adicionarOpcoes(artista.getNome());
            }
            
            Iterator<String> itOpcao = itemDesafio.getOpcoes().iterator();
                    
            jBResposta1.setText(itOpcao.next());
            jBResposta2.setText(itOpcao.next());
            jBResposta3.setText(itOpcao.next());
            jBResposta4.setText(itOpcao.next());

        } else {
            
            ArrayList<Musica> musicas = (ArrayList<Musica>) facade.pesquisarTudosMusicas();

            Set<Musica> musicasSorteadas = new HashSet<Musica>();
            musicasSorteadas.add(itemDesafio.getMusica());

            int QTD_MUSICAS = 3;

            while (musicasSorteadas.size() != (QTD_MUSICAS + 1)) {
                LinkedList<Integer> idsMusicas = Util.gerarNumerosAleatoriosComIntervalo(QTD_MUSICAS, musicas.size());

                for (Integer idSorteado : idsMusicas) {
                    if (idSorteado.intValue() < musicas.size()) {
                        musicasSorteadas.add(musicas.get(idSorteado));
                    }

                }
            }

            for (Iterator<Musica> it = musicasSorteadas.iterator(); it.hasNext();) {
                Musica musica = it.next();
                itemDesafio.adicionarOpcoes(musica.getNome());
            }
            
            Iterator<String> itOpcao = itemDesafio.getOpcoes().iterator();
                    
            jBResposta1.setText(itOpcao.next());
            jBResposta2.setText(itOpcao.next());
            jBResposta3.setText(itOpcao.next());
            jBResposta4.setText(itOpcao.next());
        }
        
        this.setItemDesafioAtual(itemDesafio);

    }
}